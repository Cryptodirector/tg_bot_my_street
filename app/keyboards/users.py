from datetime import datetime

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from app.query.users import Users

users = Users()
areas_list = []


class KeyboardsUsers:
    builder = None

    @classmethod
    async def menu_customer(
            cls,
            message: types.Message,

    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='üìå –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='add_order'),
            types.InlineKeyboardButton(text='‚Äçüíª –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='my_active_orders'),
            types.InlineKeyboardButton(text='üôã‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile_customer'),
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')

        ]
        builder.add(*buttons)
        builder.adjust(1)
        await message.edit_text(
            '<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!</i></b>',
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
        return builder

    @classmethod
    async def menu_executor(
            cls,
            message: types.Message,

    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='üßê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã', callback_data='orders_menu'),
            types.InlineKeyboardButton(text='üèÉ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='orders_active_executor'),
            types.InlineKeyboardButton(text='üôã‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile_executor'),
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')

        ]
        builder.add(*buttons)
        builder.adjust(1)
        await message.edit_text(
            '<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!</i></b>',
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
        return builder

    @classmethod
    async def profile_customer(
            cls,
            message: types.Message,
            id_tg: int

    ):
        profile = await users.profile_customer(id_tg=id_tg)
        created_at = datetime.strptime(profile[0]["created_at"], "%Y-%m-%dT%H:%M:%S.%f")
        formatted_date = created_at.strftime("%d.%m.%Y")
        formatted_time = created_at.strftime("%H:%M")
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')
        ]
        builder.add(*buttons)
        builder.adjust(2, 1)
        await message.edit_text(
            f"<b><i>–í–∞—à ID - {profile[0]['id_tg']}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - {formatted_date}, {formatted_time}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - {profile[0]['active_orders_count']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - {profile[0]['completed_orders']}</i></b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        return builder

    @classmethod
    async def profile_executor(
            cls,
            message: types.Message,
            id_tg: int

    ):
        profile = await users.profile_executor(id_tg=id_tg)
        created_at = datetime.strptime(profile[0]["created_at"], "%Y-%m-%dT%H:%M:%S.%f")
        formatted_date = created_at.strftime("%d.%m.%Y")
        formatted_time = created_at.strftime("%H:%M")
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')
        ]
        builder.add(*buttons)
        builder.adjust(2, 1)
        await message.edit_text(
            f"<b><i>–í–∞—à ID - {profile[0]['id_tg']}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - {formatted_date}, {formatted_time}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - {profile[0]['active_orders_count']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - {profile[0]['completed_orders']}</i></b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        return builder

    @classmethod
    async def all_areas(cls, message: types.Message):
        global areas_list
        areas = await users.get_all_areas()
        builder = InlineKeyboardBuilder()

        for area in areas:
            areas_list.append(area["id"])
            buttons = [
                types.InlineKeyboardButton(
                    text=f'{area["title"]}',
                    callback_data=f'area_{area["id"]}'
                )
            ]
            builder.add(*buttons)

        builder.adjust(2)
        try:
            await message.edit_text(
                '<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–π–æ–Ω:</i></b>',
                reply_markup=builder.as_markup(),
                parse_mode='HTML'
            )
            return builder

        except TelegramBadRequest:
            await message.answer(
                '<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–π–æ–Ω:</i></b>',
                reply_markup=builder.as_markup(),
                parse_mode='HTML'
            )
            return builder

    @classmethod
    async def get_information(cls, callback: types.CallbackQuery):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')
        ]
        builder.add(*buttons)
        builder.adjust(1)

        await callback.message.edit_text(
            '<b><i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</i></b>\n\n'
            '<b><i>–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞:</i></b>\n'
            '   <i>–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.</i>\n\n'
            '<b><i>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</i></b>\n'
            '   <i>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é —Å —Ç—Ä–µ–º—è —Ä–∞–∑–¥–µ–ª–∞–º–∏:</i>\n'
            '   <i>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞</i>\n'
            '   <i>–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</i>\n'
            '   <i>–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–π–æ–Ω</i>\n\n'
            '<b><i>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:</i></b>\n'
            '   <b><i>–í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</i></b>: <i>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.</i>\n'
            '   <b><i>–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</i></b> <i>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤.</i>\n'
            '   <b><i>–ü—Ä–æ—Ñ–∏–ª—å:</i></b> <i>–£–∑–Ω–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–∫–∞–∑—á–∏–∫–∞.</i>\n\n'
            '<b><i>–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</i></b>\n'
            '   <b><i>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</i></b> <i>–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ.</i>\n'
            '   <b><i>–í–∑—è—Ç—å –∑–∞–∫–∞–∑:</i></b> <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</i>\n'
            '   <b><i>–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</i></b> <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ.</i>\n'
            '   <b><i>–ü—Ä–æ—Ñ–∏–ª—å:</i></b> <i>–£–∑–Ω–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</i>\n\n'
            '<b><i>–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–π–æ–Ω:</i></b>\n'
            '   <i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–π–æ–Ω.</i>\n\n\n'
            '<b><i>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.</i></b>',

            reply_markup=builder.as_markup(),
            parse_mode='HTML'

        )

    @classmethod
    async def get_support(cls, callback: types.CallbackQuery):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')
        ]
        builder.add(*buttons)
        builder.adjust(1)

        await callback.message.edit_text(
            '<b><i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å:</i></b> @sls212',

            reply_markup=builder.as_markup(),
            parse_mode='HTML'

        )

    @classmethod
    async def get_rules(
            cls,
            callback: types.CallbackQuery
    ):
        builder = InlineKeyboardBuilder()
        buttons = [
            types.InlineKeyboardButton(text='‚¨Ö  –ù–∞–∑–∞–¥', callback_data='back_main_menu')
        ]
        builder.add(*buttons)
        builder.adjust(1)

        await callback.message.edit_text(
            '<b>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</b>\n'
            '<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.'
            ' –í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.</i>\n\n'
            '<b>–ü–†–ê–í–ò–õ–ê –î–õ–Ø –ó–ê–ö–ê–ó–ß–ò–ö–û–í</b>\n'
            '<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:</b>\n'
            '- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18+);\n'
            '- –ú–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–Ω–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∏);\n'
            '- –†–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è;\n'
            '- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\n\n'
            '<b>–ó–∞–ø—Ä–µ—Ç—ã:</b>\n'
            '- –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:\n'
            '  - <i>–Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏ –∏–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏;</i>\n'
            '  - <i>–¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞—Ä—É—à–∞—é—â–∏–º–∏ –∑–∞–∫–æ–Ω—ã –†–§.</i>\n\n'
            '<b>–î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ç–∞–±–∞–∫–∞:</b>\n'
            '- –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.\n'
            '- –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç).\n'
            '- –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–ª–∞–¥—à–µ 18 –ª–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n'
            '- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–∫–æ–Ω–∞–º –†–§.\n'
            '<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞'
            ' –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.</i>\n\n'
            '<b>–ü–†–ê–í–ò–õ–ê –î–õ–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô</b>\n'
            '- –£—á–∞—Å—Ç–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π.\n'
            '- –î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è –∏ —Ç–∞–±–∞–∫–∞ —Å—Ç—Ä–æ–≥–æ —Å 18 –ª–µ—Ç.\n'
            '- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –∑–∞–ø—Ä–µ—â–µ–Ω–æ!',
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
