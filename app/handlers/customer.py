import asyncio

from aiogram import Router

from aiogram import Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.customer import KeyboardsCustomer
from app.query.customer import Customer
from app.keyboards.back_buttons import BackButtons
from app.keyboards.users import KeyboardsUsers
from app.query.users import Users

users = Users()
customer = Customer()
keyboards_costumer = KeyboardsCustomer()
keyboards_users = KeyboardsUsers()


router = Router()
bot = Bot(token="7656161088:AAGHJoxI4ZHu64eZY0slSwO0r7r_h9ThmnQ")


class UserMSG(StatesGroup):
    address = State()
    description = State()


@router.callback_query(F.data == "add_order")
async def checkout(callback: types.CallbackQuery, state: FSMContext):
    id_tg: int = callback.from_user.id
    await users.update_activity(id_tg=id_tg)
    await callback.message.delete()
    await state.set_state(UserMSG.address)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete_msg = await callback.message.answer(
        "üè† <b><i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:\n –ü—Ä–∏–º–µ—Ä: –¢—Ä—É–¥–æ–≤–∞—è 18</i></b>",
        parse_mode='HTML'
    )
    await state.update_data(
        delete_msg_id=delete_msg.message_id
    )


@router.message(UserMSG.address)
async def set_address(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    user_data = await state.get_data()
    delete_msg_id = user_data.get("delete_msg_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        address=message.text
    )
    await message.delete()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if delete_msg_id:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=delete_msg_id
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dlt = await message.answer(
        f"<b><i>–í–∞—à –∞–¥—Ä–µ—Å: {message.text}\n"
        "üëå –ü—Ä–∏–Ω—è—Ç–æ! –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–û—Ç–∫—É–¥–∞: –ú–∞–≥–∞–∑–∏–Ω –Ø—Ä—á–µ\n"
        "–ö—É–ø–∏—Ç—å: –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: 100—Ä</i></b>",
        parse_mode="HTML"
    )
    await state.set_state(UserMSG.description)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
    await state.update_data(
        delete_msg_id=dlt.message_id
    )


@router.message(UserMSG.description)
async def set_description(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å",
                    callback_data=f"close_record",
                )
            ]
        ]
    )

    user_data = await state.get_data()
    id_area = await users.get_id_area_user(
        id_tg=message.from_user.id
    )

    await customer.add_order(
        id_tg=message.from_user.id,
        id_area=id_area[0]['id_area'],
        address=user_data["address"],
        description=message.text
    )
    await message.delete()

    delete_msg_id = user_data.get("delete_msg_id")
    if delete_msg_id:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=delete_msg_id
        )

    await bot.send_message(
        text=(
            "<b><i>üëå –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n\n"
            f"–î–µ—Ç–∞–ª–∏:\n{user_data.get('address')}\n{message.text}\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ\n"
            '"–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"</i></b>'
        ),
        chat_id=message.chat.id,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.clear()
    await asyncio.sleep(5)
    await BackButtons.back_main_menu(
        message
    )


@router.callback_query(F.data.startswith("order_complete_"))
async def order_completed(callback: types.CallbackQuery):
    id_tg: int = callback.from_user.id
    id_order = int(callback.data.split("_")[-1])
    await users.update_activity(
        id_tg=id_tg
    )
    await customer.order_is_completed(
        id_order=id_order
    )
    await callback.message.delete()
    await callback.answer("üëå –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")


@router.callback_query(F.data == 'back_main_menu')
async def back_main_menu(callback: types.CallbackQuery):
    id_tg: int = callback.from_user.id
    await users.update_activity(
        id_tg=id_tg
    )
    return await BackButtons.back_main_menu(
        callback)


@router.callback_query(F.data == 'close_record')
async def back_main_menu(callback: types.CallbackQuery):
    id_tg: int = callback.from_user.id
    await users.update_activity(
        id_tg=id_tg
    )
    await callback.message.delete()
